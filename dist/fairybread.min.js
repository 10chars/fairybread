/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FairyBread = function () {
    function FairyBread(id, sheet, rules) {
        _classCallCheck(this, FairyBread);

        this.id = this.makeId();
        this.masterClass = "." + this.id;
        this.sheet = sheet;
        this.rules = rules;
        this.index = 0;
        this.global = false;
    }

    _createClass(FairyBread, [{
        key: "makeId",
        value: function makeId() {
            var text = "fairybread_";
            var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
            for (var i = 0; i < 20; i++) {
                text += possible.charAt(Math.floor(Math.random() * possible.length));
            }
            return text;
        }
    }, {
        key: "getAll",
        value: function getAll() {
            var rules = this.sheet.cssRules || this.sheet.rules || [];
            var results = {};
            var resultsMap = {};
            resultsMap = rules.keys.map(function (data, key) {
                console.log(key);
            });

            // Browsers report selectors in lowercase
            for (var i = 0; i < rules.length; i++) {
                // FIXME: remove masterClass if fontface
                var className = rules[i].selectorText.replace(this.masterClass + " ", '');
                var cssText = rules[i].cssText.slice(rules[i].cssText.indexOf('{') + 1);
                var attrs = cssText.split(';');

                var ruleSet = {};
                for (var k = 0; k < attrs.length; ++k) {
                    var keyValue = attrs[k].split(':');
                    if (keyValue.length == 2) {
                        var key = keyValue[0].trim();
                        var value = keyValue[1].trim();
                        ruleSet[key] = value;
                    }
                }
                for (var testRule in ruleSet) {
                    // We are going to add the rule if it is not an empty object
                    results[className] = ruleSet;
                    break;
                }
            }
            return results;
        }
    }, {
        key: "extend",
        value: function extend(selector) {
            var all = this.getAll();
            return all[selector];
        }
    }, {
        key: "add",
        value: function add(selector, rules) {
            if (this.sheet.insertRule) {
                this.sheet.insertRule(this.masterClass + " " + selector + " { " + rules + " }", this.index);
            } else {
                this.sheet.addRule(this.masterClass + " " + selector, rules, this.index);
            }
            this.index++;
        }

        // addSpecial(rules) {
        //     this.sheet.insertRule(`${rules}`, this.index);
        //     this.index++;
        // }


    }, {
        key: "createScope",
        value: function createScope() {
            if (!this.sheet) {
                var styleNode = document.createElement('style');
                styleNode.type = 'text/css';
                styleNode.id = this.id;
                styleNode.rel = 'stylesheet';
                document.head.appendChild(styleNode);
                this.sheet = styleNode.sheet;
            } else {
                console.error('You have already made a sheet on this instance');
            }
            return this.id;
        }
    }, {
        key: "createGlobal",
        value: function createGlobal() {
            if (!this.sheet) {
                this.masterClass = " ";
                var styleNode = document.createElement('style');
                styleNode.type = 'text/css';
                styleNode.id = this.id;
                styleNode.rel = 'stylesheet';
                document.head.appendChild(styleNode);
                this.sheet = styleNode.sheet;
            } else {
                console.error('You have already made a sheet on this instance');
            }
        }
    }]);

    return FairyBread;
}();

/***/ })
/******/ ]);